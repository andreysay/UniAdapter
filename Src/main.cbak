/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "string.h"
#include "stm32f1xx_ll_usart.h"
#include "stm32f1xx_hal.h"
#include "main.h"
#include "adc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "os.h"
#include "StartUP.h"
#include "BSP.h"
#include "ErrorHandler.h"
#include "USART3.h"
#include "USART1.h"
#include "ControllerType.h"
#include "ControllerPort.h"
#include "main_threads.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
char string[20];  // global to assist in debugging
/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
/* it can be changed to while(1) if needed */
#define stop_cpu   __breakpoint(0)
#define THREADFREQ 1000   // frequency in Hz

// Counters for debugging
uint32_t Count3, Count4;
// Semaphore for controller scan
int32_t DeviceScan;

// RxLed - green light
int32_t Time100msSemaphore;
// TxLed - orange light
int32_t Time1secSemaphore;

extern int32_t CtrlRxTimeIsNotExpired;
// Semaphore for transmit
extern int32_t U3_RxSemaphore;
// Semaphore for reception
extern int32_t U3_TxSemaphore;
// Semaphore for reception initialisation
extern int32_t U3_RxInitSema;

// Semaphore for Controller port initialisation
extern int32_t PortCtrlTxInitSema;
extern int32_t PortCtrlRxInitSema;
extern int32_t U1_TxSemaphore;
extern int32_t U1_RxSemaphore;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void EventThread100ms(void){
	Count3 = 0;
	while(1){
		OS_Wait(&Time100msSemaphore);           // 1000 Hz real time task
		while(CtrlRxTimeIsNotExpired){ CtrlRxTimeIsNotExpired--; };
		Count3++;
	};
}
void EventThread1sec(void){ 
  Count4 = 0;
	while(1){
		OS_Wait(&Time1secSemaphore);
		HAL_GPIO_WritePin(GPIOB, LED_RED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_TogglePin(GPIOB, LED_GRN_PIN);
		Count4++;
	};
}

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  /* MCU Configuration----------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
//  HAL_Init();
  /* USER CODE BEGIN Init */
	OS_Init();            // initialize, disable interrupts
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
	USART1_Init();
	USART3_Init();
  MX_ADC1_Init();
  MX_TIM4_Init();
  MX_TIM3_Init();
	CtrlPortRegistersInit();
  /* USER CODE BEGIN 2 */

	OS_PeriodTrigger0_Init(&Time100msSemaphore, 100);
	OS_PeriodTrigger1_Init(&Time1secSemaphore, 500);
	OS_InitSemaphore(&U3_RxInitSema, 1);
	OS_InitSemaphore(&U3_RxSemaphore, 0);
	OS_InitSemaphore(&U3_TxSemaphore, 0);
	OS_InitSemaphore(&Time100msSemaphore, 0);
	OS_InitSemaphore(&Time1secSemaphore, 0);
	
	OS_InitSemaphore(&PortCtrlRxInitSema, 0);
	OS_InitSemaphore(&U1_RxSemaphore, 0);
	OS_InitSemaphore(&PortCtrlTxInitSema, 0);
	OS_InitSemaphore(&U1_TxSemaphore, 0);
	
	
	OS_AddThread(&MU_PortReceptionInit, 2);
	OS_AddThread(&MU_PortHandleContinuousReception, 2);
	
	OS_AddThread(&CtrlPortTxInit, 2);	
	OS_AddThread(&CtrlPortSendMsg, 2);
	
	OS_AddThread(&CtrlPortRxInit, 2);
	OS_AddThread(&CtrlPortHandleContinuousReception, 2);
	
	OS_AddThread(&MU_PortSendMsg, 2);
	
	OS_AddThread(&EventThread100ms, 2);
	OS_AddThread(&EventThread1sec, 2);
	OS_AddThread(&IdleTask,7);     // lowest priority, dummy task
	OS_Launch(BSP_Clock_GetFreq()/THREADFREQ); // doesn't return, interrupts enabled in here
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//			stop_cpu;// Should not be here
		_Error_Handler(__FILE__, __LINE__);
  }

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
