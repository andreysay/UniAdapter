/**
  ******************************************************************************
  * File Name          : main.c
  * Description        : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f1xx_hal.h"
#include "adc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"
#include "ErrorHandler.h"
#include "os.h"
#include "StartUP.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
/* it can be changed to while(1) if needed */
#define stop_cpu   __breakpoint(0)
#define THREADFREQ 1000   // frequency in Hz
#define ONE_SECOND 1000
extern __IO ITStatus Uart1Ready;
extern __IO ITStatus MU_PortReady;
uint32_t Count0, Count1, Count2, Count3, Count4;
int32_t DeviceScan;
int32_t RxSemaphore;
int32_t TxSemaphore;
/* Buffer used for transmission */
//static uint8_t aTx1Buffer[] = "\n\r ****MU_Port_Test****  ****MU_Port_Test****  ****MU_Port_Test**** ";
static uint8_t aTx1Buffer[] = {'\n', '\r', 'A', 'B', 'C', 'D', 'E', 'F'};
static uint8_t aRx1Buffer[8];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
void EventThread0(void){ 
  Count3 = 0;           // 10 Hz real time task
  Count3++;
	HAL_GPIO_TogglePin(GPIOB, LED_GRN_PIN);
//  OS_Suspend();       // execution of event threads must short and bounded
}
void EventThread1(void){ 
  Count4 = 0;
	// 50 Hz real time task
    Count4++;

//		OS_Suspend();
}
void MainThread0(void){
  Count0 = 0;
  while(1){
    Count0++;

  }
}
void MU_PortTransmitThread(void){
  Count1 = 0;
  while(1){
		OS_Wait(&TxSemaphore);
    Count1++;
//		HAL_GPIO_WritePin(GPIO_Dir, PIN_Dir, GPIO_PIN_SET);
		/*##- Start the transmission process #####################################*/  
		/* While the UART in reception process, user can transmit data through 
     "aTxBuffer" buffer */
//		if(HAL_UART_Transmit_IT(&huart3, (uint8_t*)aTx1Buffer, sizeof(aTx1Buffer))!= HAL_OK)
//		{
//			_Error_Handler(__FILE__, __LINE__);
//		}
//		while (MU_PortReady != SET)
//		{
//		}
//		MU_PortReady = RESET;
		OS_Signal(&TxSemaphore);
		OS_Suspend();  // main threads can cooperate
//		OS_Sleep(ONE_SECOND);
  }
}
void MU_PortReceiveThread(void){
  Count2 = 0;
  while(1){
		OS_Wait(&RxSemaphore);
    Count2++;
		HAL_GPIO_WritePin(GPIO_Dir, PIN_Dir, GPIO_PIN_RESET);
		/*##- Put UART peripheral in reception process ###########################*/  
		if(HAL_UART_Receive_IT(&huart3, (uint8_t *)aRx1Buffer, 10) != HAL_OK)
		{
			_Error_Handler(__FILE__, __LINE__);
		}
		while(MU_PortReady != SET)
		{
		}
		MU_PortReady = RESET;
    OS_Suspend();  // main threads can cooperate
  }
}
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
	OS_Init();            // initialize, disable interrupts
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
//  MX_ADC1_Init();
//  MX_TIM4_Init();
	HAL_GPIO_WritePin(GPIOB, LED_RED_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(GPIOB, LED_GRN_PIN, GPIO_PIN_RESET);
  /* USER CODE BEGIN 2 */
	OS_InitSemaphore(&RxSemaphore, 0);
	OS_InitSemaphore(&TxSemaphore, 1);
	OS_AddThreads(&MainThread0, &MU_PortReceiveThread, &MU_PortTransmitThread);
  OS_AddPeriodicEventThread(&EventThread0, 1000);
	OS_AddPeriodicEventThread(&EventThread1, 1000);
	OS_Launch(SystemCoreClock/THREADFREQ); // doesn't return, interrupts enabled in here
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
		stop_cpu;// Should not be here
  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
